{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "12881ce6-2477-4b0c-a633-9d170f8b07ab", 
    "version": "v1.1", 
    "script": "\"\"\"\r\nThis script searches all in-scope HTTP responses for JWTs using the regular expression specified by\r\nsession[\"jwt_regex\"] (see Line 15). If a JWT is found, then it decodes the payload and displays\r\neach leaf JSON attribute in the table above. Thereby, the rows of the table are deduplicated.\n\nUse this script to identify sensitive information in JWTs.\n\"\"\"\nimport re\nimport os\nimport json\nimport traceback\n\n# Do the initial setup\nif ref == 1 or \"jwt_regex\" not in session or \"dedup\" not in session:\n\tsession[\"jwt_regex\"] = re.compile(\"(?P<jwt>eyJ\\w+\\.eyJ\\w+\\.\\w+)\")\n\theader = [\"Ref.\", \"Host\", \"URL\", \"Path\", \"Name\", \"Value\", \"Depth\"]\n\tsession[\"dedup\"] = {}\n\ndef get_jwts(content):\n\t\"\"\"\n\tThis method implements the core functionality to extract information from requests or responses based on\n\tthe given regular expressions.\n\t\"\"\"\n\tglobal session\n\tresult = []\n\tfor match in session[\"jwt_regex\"].finditer(content):\r\n\t\tif has_stopped():\r\n\t\t\tbreak\n\t\tresult.append(match.group(\"jwt\"))\n\treturn result\n\ndef get_items(content, path=\"/\"):\n\t\"\"\"\n\tThis method recursively parses the given JSON object tag and returns the results in a two-dimensional list.\n\t\"\"\"\n\tglobal url\n\tglobal ref\n\tresult = []\n\tif isinstance(content, dict):\n\t\tfor key, value in content.items():\n\t\t\tresult += get_items(value, os.path.join(path, unicode(key)))\n\telif isinstance(content, list):\n\t\tfor item in content:\n\t\t\tresult += get_items(item, path)\n\telse:\n\t\tunicode_path = unicode(path)\n\t\tpath_items = unicode_path.split(\"/\")\n\t\tresult = [[ref, get_hostname(url), url.getPath(), unicode_path, path_items[-1], unicode(content), len(path_items) - 1]]\n\treturn result\n\n# Process only in-scope HTTP requests and responses\nresponse = message_info.getResponse()\nif in_scope and response:\n\ttry:\n\t\tjwts = get_jwts(unicode(helpers.bytesToString(response)))\n\t\tfor jwt in jwts:\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\n\t\t\ttoken = decode_jwt(jwt)\n\t\t\tif token[1]:\n\t\t\t\tjson_object = json.JSONDecoder().decode(token[1])\n\t\t\t\tresults = get_items(json_object)\n\t\t\t\tif \"dedup\" in session:\n\t\t\t\t\tfor row in results:\n\t\t\t\t\t\tkey = \":\".join([unicode(item) for item in row[2:]])\n\t\t\t\t\t\tif key not in session[\"dedup\"]:\n\t\t\t\t\t\t\trows.append(row)\n\t\t\t\t\t\t\tsession[\"dedup\"][key] = None\n\texcept:\n\t\ttraceback.print_exc(file=callbacks.getStderr())", 
    "name": "JWT - Template Script to Extract and Display All JWT Attributes from HTTP Responses (One JSON Attribute per Table Row)"
}