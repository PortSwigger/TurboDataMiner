{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "15302930-aa43-4d7a-88c5-434bc4b9f763", 
    "version": "v1.3", 
    "script": "\"\"\"\nThis script searches in-scope HTTP requests and responses for information based on regular expressions\nthat are stored in dictionary session[\"relist\"] (see Lines 13+) and if found, adds the identified value\r\nto the table above.\n\nNote that each regular expression must contain the named group \"value\" whose content will be extracted\nand added to the table.\n\"\"\"\nimport re\n\n# Do the initial setup\nif ref == 1 or \"relist\" not in session:\n\tsession[\"relist\"] = {\n\t\t\"guid\": re.compile(\"[^0-9a-zA-Z](?P<value>[0-9a-zA-Z]{8,8}(-[0-9a-zA-Z]{4,4}){3,3}-[0-9a-zA-Z]{12,12})[^0-9a-zA-Z]\"),\n\t\t# \"meta-tag\": re.compile(\"(?P<value><meta .*?>)\"),\r\n\t\t# \"external-resources\": re.compile(\"[\\\"'](?P<value>https?://[^\\\"']+?\\.((css)|(js)))[\\\"']\", re.IGNORECASE)\n\t}\n\theader = [\"Ref.\", \"Host\", \"Path\", \"Extracted From\", \"Category\", \"Value\"]\n\ndef parse_content(content, regexes):\n\t\"\"\"\n\tThis method implements the core functionality to extract information\n\tfrom requests or responses based on the given regular expressions.\n\t\"\"\"\n\tresult = {}\n\tfor key, value in regexes.items():\n\t\tfor match in value.finditer(content):\r\n\t\t\tif has_stopped():\r\n\t\t\t\treturn result\n\t\t\telif key in result:\n\t\t\t\tresult[key].append(match.group(\"value\"))\n\t\t\telse:\n\t\t\t\tresult[key] = [match.group(\"value\")]\n\treturn result\n\n# Process only in-scope requests and responses\nif in_scope:\n\t# Search request content\n\trequest = message_info.getRequest()\n\trequest_string = helpers.bytesToString(request).encode(\"utf-8\")\n\trequest_list = parse_content(request_string, session[\"relist\"])\n\tfor key, values in request_list.items():\r\n\t\tif has_stopped():\r\n\t\t\tbreak\n\t\trows.extend([[ref, get_hostname(url), url.getPath(), \"Request\", key, item] for item in values if item != url.getHost()])\n\n\t# Search response content\n\tresponse = message_info.getResponse()\n\tif response:\n\t\tresponse_string = helpers.bytesToString(response).encode(\"utf-8\") if response else \"\"\n\t\tresponse_list = parse_content(response_string, session[\"relist\"])\n\t\tfor key, values in response_list.items():\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\n\t\t\trows.extend([[ref, get_hostname(url), url.getPath(), \"Response\", key, item] for item in values if item != url.getHost()])", 
    "name": "Misc - Template Script to Extract Information From In-Scope Requests and Responses"
}