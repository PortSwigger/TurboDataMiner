{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "1d52128b-9770-4179-a3f1-6af16c032d3e", 
    "version": "v1.1", 
    "script": "\"\"\"\nThis script identifies all out-of-scope HTTP requests that contain in-scope URLs \nin their Referer header and adds them to the table above.\n\"\"\"\nimport re\nfrom java.net import URL\n\n# Do the initial setup\nif ref == 1 or \"dedup\" not in session:\n\theader = [\"Ref.\", \"HTTPS\", \"URL\", \"Referer Header\"]\n\tsession[\"dedup\"] = {}\n\n# Process only out-of-scope HTTP requests and responses\nif not in_scope:\n\trequest_info = analyze_request(message_info)\n\tresult = get_header(request_info.getHeaders(), \"Referer\")\n\treferer = result[1]\n\tif referer:\n\t\treferer = URL(referer)\n\t\thost_name = get_hostname(url)\n\t\tdedup = unicode(host_name) + unicode(referer)\n\t\t# If referer header host is in scope, then add it to the table above\n\t\tif referer.getHost() != url.getHost() and callbacks.isInScope(referer) and dedup not in session[\"dedup\"]:\n\t\t\trows = [[ref, url.getProtocol().lower()==\"https\", host_name, referer]]\n\t\t\tsession[\"dedup\"][dedup] = True", 
    "name": "Referer - Template Script to Determine Whether Information is Disclosed via HTTP Referer Header To Out-Of-Scope Page"
}