{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "4a70691d-14fd-4fea-815c-9eef43c560a9", 
    "version": "v1.1", 
    "script": "\"\"\"\nThis script parses the HTTP response body for XML objects and displays each leaf tag together with its\nattributes and values in the table above. Thereby, the rows of the table are deduplicated.\n\nUse this script to identify the location of a specific value within the XML object or to reduce the\r\ncomplexity of the XML object during a review.\n\"\"\"\nimport os\nimport re\nimport traceback\nfrom java.lang import Thread\n\n# Due to the following issue, we have to manually load our own local Apache Xerces library:\n# https://forum.portswigger.net/thread/saxparser-dependency-delimma-499c057a\nThread.currentThread().setContextClassLoader(xerceslib)\nimport xml.etree.ElementTree as ET\n\n# Do the initial setup\nif ref == 1 or \"dedup\" not in session:\n\theader = [\"Ref.\", \"Host\", \"URL\", \"Path\", \"Type\", \"Name\", \"Value\", \"Depth\"]\n\t# If you want to disable deduplication, remove the following line and press button \"Clear Session\" to \n\t# reset the content of the session variable\n\tsession[\"dedup\"] = {}\n\ndef get_items(tag, url, ref, path=\"/\", depth=1):\n\t\"\"\"\n\tThis method recursively parses the given XML tag and returns the results in a two-dimensional list.\n\t\"\"\"\n\ttag_name = re.sub(\"^\\{http://.*?\\}\", \"\", tag.tag)\n\tresult = []\n\tnew_path = os.path.join(path, tag_name)\n\tif len(list(tag)) == 0:\r\n\t\thost_name = get_hostname(url)\r\n\t\tpath = url.getPath()\n\t\tresult.append([ref, host_name, path, new_path, \"Tag\", unicode(tag_name), unicode(tag.text), depth])\n\t\tfor attribute in tag.items():\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\n\t\t\tresult.append([ref, host_name, path, \"{}/@{}\".format(new_path, attribute[0]), \"Attribute\",  unicode(attribute[0]), unicode(attribute[1]), depth])\n\telse:\n\t\tfor item in list(tag):\r\n\t\t\tif has_stopped():\r\n\t\t\t\tbreak\n\t\t\tresult += get_items(item, url, ref, new_path, depth + 1)\n\treturn result\n\n# Process only in-scope HTTP responses\nresponse = message_info.getResponse()\nif in_scope and response:\n\tresponse_info = helpers.analyzeResponse(response)\n\tbody_offset = response_info.getBodyOffset()\n\tbody_bytes = response[body_offset:]\n\tbody_content = helpers.bytesToString(body_bytes)\n\t\n\ttry:\n\t\troot = ET.fromstring(body_content.encode(\"utf-8\"))\n\t\tresults = get_items(root, url, ref)\n    \t# perform deduplication\n\t\tif \"dedup\" in session:\n\t\t\tfor row in results:\n\t\t\t\tkey = \":\".join([unicode(item) for item in row[1:]])\r\n\t\t\t\tif has_stopped():\r\n\t\t\t\t\tbreak\n\t\t\t\telif key not in session[\"dedup\"]:\n\t\t\t\t\trows.append(row)\n\t\t\t\t\tsession[\"dedup\"][key] = None\n\t\telse:\n\t\t\trows = results\n\texcept:\n\t\ttraceback.print_exc(file=callbacks.getStderr())", 
    "name": "XML - Template Script to Display All XML Leaf Tag and Attribute Values (Deduplicated) From Responses"
}