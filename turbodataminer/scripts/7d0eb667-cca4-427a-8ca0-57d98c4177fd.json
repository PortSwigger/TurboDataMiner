{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "7d0eb667-cca4-427a-8ca0-57d98c4177fd", 
    "version": "v1.3", 
    "script": "\"\"\"\nThis script extracts the values of all in-scope HTTP response headers, which are specified in variable \nsession[\"re_header_names\"] (see Lines 9+) and displays them in the table above.\n\"\"\"\nimport re\n\n# Do the initial setup\nif ref == 1 or \"header_names\" not in session or \"case_sensitive\" not in session:\n\tsession[\"re_header_names\"] = [\r\n\t\tre.compile(\"^Server$\", re.IGNORECASE),\n\t\tre.compile(\"^X-Powered-By$\", re.IGNORECASE),\r\n\t\tre.compile(\"^X-Content-Security-Policy$\",  re.IGNORECASE),\n\t\tre.compile(\"^Content-Security-Policy$\",  re.IGNORECASE),\n\t\tre.compile(\"^X-Frame-Options$\", re.IGNORECASE),\n\t\tre.compile(\"^Strict-Transport-Security$\", re.IGNORECASE),\n\t\tre.compile(\"^X-XSS-Protection$\", re.IGNORECASE),\n\t\tre.compile(\"^X-Content-Type-Options$\", re.IGNORECASE),\n\t\tre.compile(\"^Access-Control-Allow-Origin$\", re.IGNORECASE),\n\t\tre.compile(\"^Access-Control-Allow-Methods$\", re.IGNORECASE),\n\t\tre.compile(\"^Access-Control-Allow-Headers$\", re.IGNORECASE),\n\t\tre.compile(\"^Access-Control-Expose-Headers$\", re.IGNORECASE),\n\t\tre.compile(\"^Access-Control-Allow-Credentials$\", re.IGNORECASE),\n\t\tre.compile(\"^Access-Control-Max-Age$\", re.IGNORECASE),\n\t\tre.compile(\"^Origin$\", re.IGNORECASE),\n\t\tre.compile(\"^Referrer-Policy$\", re.IGNORECASE),\r\n\t\tre.compile(\"^Cache-control$\", re.IGNORECASE),\n\t\tre.compile(\"^Pragma$\", re.IGNORECASE),\n\t\tre.compile(\"^Expires$\", re.IGNORECASE),\r\n\t\tre.compile(\"^Age$\", re.IGNORECASE),\r\n\t\tre.compile(\"^X-Cache$\", re.IGNORECASE),\r\n\t\tre.compile(\"^CF-Cache-Status$\", re.IGNORECASE),\r\n\t\tre.compile(\"^Vary$\", re.IGNORECASE)]\n\theader = [\"Ref.\", \"URL\", \"Path\", \"Extension\", \"Status Code\", \"Has Params\", \"Content-Type\"]\n\textension = url.getPath().split(\".\")[-1]\n\textension = extension if \"/\" not in extension else \"\"\n\tfor item in session[\"re_header_names\"]:\n\t\theader.append(item.pattern)\n\n# Process only in-scope HTTP responses\nresponse = message_info.getResponse()\nif in_scope and response:\n\tresponse_info = helpers.analyzeResponse(response)\n\tcontent_type = get_content_type(response_info.getHeaders())\n\tresults = get_headers(response_info.getHeaders(), session[\"re_header_names\"])\n\tparameter_count = len(request_info.getParameters())\n\tcount = 0\n\trow = []\n\tfor key in session[\"re_header_names\"]:\n\t\tvalue = results[key.pattern]\n\t\tvalue = \";\".join(value) if value is not None else \"\"\r\n\t\tif has_stopped():\r\n\t\t\tbreak\n\t\telif value:\n\t\t\tcount = count + 1\n\t\t\trow.append(value)\n\t\telse:\n\t\t\trow.append(\"\")\n\tif count > 0:\n\t\ttmp = [ref, get_hostname(url), url.getPath(), extension, response_info.getStatusCode(), parameter_count>0, content_type]\n\t\ttmp.extend(row)\n\t\trows.append(tmp)", 
    "name": "Header - Template Script to Extract HTTP Response Header Values via Regular Expressions"
}