{
    "author": "Lukas Reiter", 
    "plugins": [
        0, 
        6, 
        7
    ], 
    "burp_professional_only": false, 
    "uuid": "83e9f980-83e2-42da-b602-6b7741d13bcf", 
    "version": "v1.2", 
    "script": "\"\"\"\nThis script checks whether session cookie values are disclosed in Referer headers, URLs, or response bodies\r\nand if this is the case, then the location of the disclosure is displayed in the table above. Thereby, the\r\nrows of the table are deduplicated.\r\n\r\nNote that you have to specify the list of all cookie names that are used for authorization and whose values\r\nshould be investigated in list session[\"in_scope_cookie_names\"] (see Line 13). If you leave the list empty,\r\nthen all cookies issued by in-scope HTTP responses are used.\n\"\"\"\nimport re\n\n# Do the initial setup\nif ref == 1 or \"in_scope_cookie_names\" not in session or \"cookie_values\" not in session or \"dedup\" not in session:\n\t# TODO: Specify all session cookie names, which are used for authorization, in the following list.\n\tsession[\"in_scope_cookie_names\"] = [] # [\"JSESSIONID\"]\n\tsession[\"cookie_values\"] = {}\n\tsession[\"dedup\"] = {}\n\theader = [\"Ref.\", \"Host\", \"URL\", \"Disclosed Cookie\", \"In Path\", \"In Referer\", \"In Response Body\"]\n\ndef check_cookie(url, referer = None, body_content = None):\n\t\"\"\"\n\tThis method checks whether the given URL, Referer header value, or response body contains one of the already used session cookie values.\n\t\"\"\"\r\n\thost = unicode(get_hostname(url))\r\n\tpath = url.getPath()\n\n\tfor cookie_value, cookie_regex in session[\"cookie_values\"].items():\n\t\tin_path = len(cookie_regex.findall(path)) > 0\n\t\tin_referer = len(cookie_regex.findall(referer)) > 0 if referer else False\n\t\tin_body = len(cookie_regex.findall(body_content)) > 0 if body_content else False\n\t\tkey = host + path + unicode(in_path) + unicode(in_referer) + unicode(in_body)\n\r\n\t\tif has_stopped():\r\n\t\t\tbreak\n\t\telif (in_path or in_body) and key not in session[\"dedup\"]:\n\t\t\tsession[\"dedup\"][key] = None\n\t\t\trows.append([ref, host, path, cookie_value, in_path, in_referer, in_body])\n\n_, referer_value = get_header(request_info.getHeaders(), \"Referer\")\n# Process only in-scope HTTP responses\nif in_scope:\n\tresponse = message_info.getResponse()\n\tif response:\n\t\tresponse_info = helpers.analyzeResponse(response)\n\t\tbody_offset = response_info.getBodyOffset()\n\t\tbody_bytes = response[body_offset:]\n\t\tbody_content = helpers.bytesToString(body_bytes)\n\t\tcookies = get_cookies(response_info)\n\n\t\t# Add issued cookies to list of known cookies\n\t\tfor cookie in cookies:\r\n\t\t\tif has_stopped():\r\n\t\t\t\tprint(\"exit\")\r\n\t\t\t\tbreak\n\t\t\telif (not session[\"in_scope_cookie_names\"] or cookie[\"name\"] in session[\"in_scope_cookie_names\"]) and cookie[\"value\"]:\n\t\t\t\tcookie_value = re.escape(cookie[\"value\"])\n\t\t\t\tsession[\"cookie_values\"][cookie_value] = re.compile(cookie_value, re.IGNORECASE)\n\n\t\t# Check current URL and response body for known cookies\n\t\tcheck_cookie(url, referer_value, body_content)\n\telse:\n\t\tcheck_cookie(url, referer_value)\nelse:\n\tcheck_cookie(url, referer_value)", 
    "name": "Cookie - Template Script to Detect Session Cookie Disclosure in Referer, URL, and HTML Page"
}