{
    "author": "Lukas Reiter", 
    "plugins": [
        5
    ], 
    "uuid": "c72570de-2a0d-4288-bc1c-730c2e1149db", 
    "version": "v1.1", 
    "script": "\"\"\"\nThis script implements an custom editor tab via the IMessageEditorTab interface allowing \nthe convenient de- and encoding of Bearer Authentication headers like the following \n(source: https://jwt.io/):\n\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\"\"\"\nimport re\n\ndef is_enabled(content, is_request, session):\n\t\"\"\"\n\tThis method is invoked before an HTTP message is displayed in an custom editor tab, so that this custom \n\ttab can indicate whether it should be enabled for that message.\n\t\n\tFor more information, refer to the Burp Suite API, IMessageEditorTab interface, method isEnabled.\n\t:param content (List[bytes]): The message that is about to be displayed by this custom editor tab, or a \n\tzero-length array if the existing message is to be cleared.\n\t:param is_request (bool): Indicates whether the message is a request or a response.\n\t:param session (dict): The dictionary allows storing information accross method calls.\n\t:return (bool) If the custom tab is able to handle the specified message, and so will be displayed within the \n\teditor. Otherwise, the tab will be hidden while this message is displayed.\n\t\"\"\"\n\t# Do the initial setup\n\tif \"re_header\" not in session or \"header\" not in session:\n\t\tsession[\"jwt_encoded\"] = re.compile(\"^Authorization:\\s+Bearer\\s+(?P<jwt>eyJ\\w+?\\.eyJ\\w+?\\..+?)$\", re.IGNORECASE)\n\t\tsession[\"jwt_decoded\"] = re.compile(\"^Authorization:\\s+Bearer\\s+(?P<header>\\{.+?\\})\\.(?P<payload>\\{.+?\\})\\.(?P<signature>.+?)$\", re.IGNORECASE)\n\t\tsession[\"header\"] = \"Authorization: Bearer\"\n\tresult = False\n\tif is_request:\n\t\trequest_info = helpers.analyzeRequest(content)\n\t\tjwt = get_jwt(request_info.getHeaders(), session[\"jwt_encoded\"].pattern)\n\t\tresult = (len(jwt) == 3 and jwt[0] and jwt[1])\n\treturn result\n\ndef set_message(content, is_request, session):\n\t\"\"\"\n\tThis method compiles the message to be displayed in this custom editor tab.\n\t\n\tFor more information, refer to the Burp Suite API, IMessageEditorTab interface, method set_message.\n\t:param content (List[bytes]): The original message based on which the new message, which is going to be \n\tdisplayed by this custom editor tab, is created.\n\t:param is_request (bool): Indicates whether the message is a request or a response.\n\t:param session (dict): The dictionary allows storing information accross method calls.\n\t:return (List[bytes]) Returns the modified content of variable content.\n\t\"\"\"\n\trequest_info = helpers.analyzeRequest(content)\n\tbody_offset = request_info.getBodyOffset()\n\tbody_bytes = content[body_offset:]\n\tjwt = get_jwt(request_info.getHeaders(), session[\"jwt_encoded\"].pattern)\n\theaders = []\n\tfor header in request_info.getHeaders():\n\t\tif header.startswith(session[\"header\"]):\n\t\t\theaders.append(\"{} {}\".format(session[\"header\"], \".\".join(jwt)))\n\t\telse:\n\t\t\theaders.append(header)\n\treturn helpers.buildHttpMessage(headers, body_bytes)\n\t\ndef get_message(content, session):\n\t\"\"\"\n\tThis method converts back the currently displayed message.\n\n\tFor more information, refer to the Burp Suite API, IMessageEditorTab interface, method set_message.\n\t:param content (List[bytes]): The original message based on which the new message, which is going to be \n\tdisplayed by this custom editor tab, is created.\n\t:param session (dict): The dictionary allows storing information accross method calls.\n\t:return (List[bytes]) Returns the modified content of variable content.\n\t\"\"\"\n\trequest_info = helpers.analyzeRequest(content)\n\tbody_offset = request_info.getBodyOffset()\n\tbody_bytes = content[body_offset:]\n\theaders = []\n\tfor header in request_info.getHeaders():\n\t\tmatch = session[\"jwt_decoded\"].match(header)\n\t\tif match:\n\t\t\theader = match.group(\"header\")\n\t\t\tpayload = match.group(\"payload\")\n\t\t\tsignature = match.group(\"signature\")\n\t\t\tjwt = encode_jwt(header, payload, signature)\n\t\t\theaders.append(\"{} {}\".format(session[\"header\"], jwt))\n\t\telse:\n\t\t\theaders.append(header)\n\treturn helpers.buildHttpMessage(headers, body_bytes)\n", 
    "name": "JWT - Template Custom Message Tab to En- and Decoding Authentication Bearer Tokens"
}