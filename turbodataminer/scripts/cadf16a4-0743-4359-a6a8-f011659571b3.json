{
    "author": "Lukas Reiter", 
    "plugins": [
        5
    ], 
    "uuid": "cadf16a4-0743-4359-a6a8-f011659571b3", 
    "version": "v1.0", 
    "script": "\"\"\"\nThis script implements an custom editor tab via the IMessageEditorTab interface allowing \nthe convenient URL de- and encoding of the parameter names and types specified in list\nsession[\"filter\"] (see Line 30). Each element in session[\"filter\"] is a tuple. The tuple's first element\nis the parameter name and the second element is the parameter type that shall be decoded.\n\nUpdate the GET parameter name and type specified session[\"filter\"] according to your needs.\n\"\"\"\nimport re\nfrom burp import IParameter\n\ndef is_enabled(content, is_request, session):\n\t\"\"\"\n\tThis method is invoked before an HTTP message is displayed in an custom editor tab, so that this custom \n\ttab can indicate whether it should be enabled for that message.\n\t\n\tFor more information, refer to the Burp Suite API, IMessageEditorTab interface, method isEnabled.\n\t:param content (List[bytes]): The message that is about to be displayed by this custom editor tab, or a \n\tzero-length array if the existing message is to be cleared.\n\t:param is_request (bool): Indicates whether the message is a request or a response.\n\t:param session (dict): The dictionary allows storing information accross method calls.\n\t:return (bool) If the custom tab is able to handle the specified message, and so will be displayed within the \n\teditor. Otherwise, the tab will be hidden while this message is displayed.\n\t\"\"\"\n\t# Do the initial setup\n\tsession[\"parameters\"] = []\n\tif \"filter\" not in session or \"request\" not in session:\n\t\tsession[\"request\"] = None\n\t\t# TODO: Update parameter names and types\n\t\tsession[\"filter\"] = [(\"PARAMETER NAME\", IParameter.PARAM_URL)]\n\tresult = False\n\n\t# Search for the parameter that should be decoded\n\tif is_request:\n\t\trequest_info = helpers.analyzeRequest(content)\n\t\tfor parameter in request_info.getParameters():\n\t\t\tfor parameter_name, parameter_type in session[\"filter\"]:\n\t\t\t\tif (not parameter_type or parameter_type == parameter.getType()) and unicode(parameter.getName(), errors=\"ignore\") == parameter_name:\n\t\t\t\t\tresult = True\n\t\t\t\t\tsession[\"parameters\"].append(parameter)\n\t\t\t\t\tif not session[\"request\"]:\n\t\t\t\t\t\tsession[\"request\"] = content\n\treturn result\n\ndef set_message(content, is_request, session):\n\t\"\"\"\n\tThis method compiles the message to be displayed in this custom editor tab.\n\t\n\tFor more information, refer to the Burp Suite API, IMessageEditorTab interface, method set_message.\n\t:param content (List[bytes]): The original message based on which the new message, which is going to be \n\tdisplayed by this custom editor tab, is created.\n\t:param is_request (bool): Indicates whether the message is a request or a response.\n\t:param session (dict): The dictionary allows storing information accross method calls.\n\t:return (List[bytes]) Returns the modified content of variable content.\n\t\"\"\"\n\tresult = content\n\tif \"filter\" not in session:\n\t\tsession[\"filter\"] = {}\n\tif is_request:\n\t\t# Extract body for building the new request\n\t\trequest_info = helpers.analyzeRequest(content)\n\t\tbody_offset = request_info.getBodyOffset()\n\t\tbody_bytes = content[body_offset:]\n\t\t\n\t\t# Obtain and URL decode the relevant parameter\n\t\tnew_content = content\n\t\tfor parameter in request_info.getParameters():\n\t\t\tfor parameter_name, parameter_type in session[\"filter\"]:\n\t\t\t\tif (not parameter_type or parameter_type == parameter.getType()) and unicode(parameter.getName(), errors=\"ignore\") == parameter_name:\n\t\t\t\t\tvalue = helpers.urlDecode(parameter.getValue())\n\t\t\t\t\tnew_parameter = helpers.buildParameter(parameter.getName(), value, parameter.getType())\n\t\t\t\t\tnew_content = helpers.updateParameter(new_content, new_parameter)\n\n\t\t# Build new request\n\t\tnew_request_info = helpers.analyzeRequest(new_content)\n\t\tcontent = helpers.buildHttpMessage(new_request_info.getHeaders(), body_bytes)\n\treturn content\n\t\ndef get_message(content, session):\n\t\"\"\"\n\tThis method converts back the currently displayed message.\n\n\tFor more information, refer to the Burp Suite API, IMessageEditorTab interface, method set_message.\n\t:param content (List[bytes]): The original message based on which the new message, which is going to be \n\tdisplayed by this custom editor tab, is created.\n\t:param session (dict): The dictionary allows storing information accross method calls.\n\t:return (List[bytes]) Returns the modified content of variable content.\n\t\"\"\"\n\tif \"filter\" not in session:\n\t\tsession[\"filter\"] = {}\n\t# Extract body for building the new request\n\trequest_info = helpers.analyzeRequest(content)\n\tbody_offset = request_info.getBodyOffset()\n\tbody_bytes = content[body_offset:]\n\n\t# URL encode in-scope parameters\n\tnew_content = content\n\tfor parameter in request_info.getParameters():\n\t\tfor parameter_name, parameter_type in session[\"filter\"]:\n\t\t\tif (not parameter_type or parameter_type == parameter.getType()) and unicode(parameter.getName(), errors=\"ignore\") == parameter_name:\n\t\t\t\tvalue = helpers.urlEncode(parameter.getValue())\n\t\t\t\tnew_parameter = helpers.buildParameter(parameter.getName(), value, parameter.getType())\n\t\t\t\tnew_content = helpers.updateParameter(new_content, new_parameter)\t\n\t# Build new request\n\tnew_request_info = helpers.analyzeRequest(new_content)\n\treturn helpers.buildHttpMessage(new_request_info.getHeaders(), body_bytes)\n", 
    "name": "Parameter - Template Script to URL En- and Decode Parameter Values"
}