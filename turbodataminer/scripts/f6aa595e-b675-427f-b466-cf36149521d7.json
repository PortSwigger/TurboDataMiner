{
    "author": "Lukas Reiter", 
    "plugins": [
        3
    ], 
    "uuid": "f6aa595e-b675-427f-b466-cf36149521d7", 
    "version": "v1.0", 
    "script": "\"\"\"\r\nThis script adds the header X-Forwarded-For with different IPv4 addresses to each HTTP request.\r\n\r\nNote: If the X-Forward-For header already exists, then it is updated. In addition, with each new\r\nstart of this script, the script uses the starting IP address again.\r\n\"\"\"\r\nimport re\r\nfrom burp import IBurpExtenderCallbacks\r\n\r\n# Do the initial setup\r\nif ref == 1 or \"header\" not in session or \"original_address\" not in session or \"tools\" not in session or \"current_address\" not in session:\r\n\tsession[\"original_address\"] = \"10.0.0.1\"\r\n\tsession[\"header\"] = \"X-Forwarded-For\"\r\n\tsession[\"tools\"] = [IBurpExtenderCallbacks.TOOL_PROXY, IBurpExtenderCallbacks.TOOL_SCANNER, IBurpExtenderCallbacks.TOOL_INTRUDER, IBurpExtenderCallbacks.TOOL_REPEATER, IBurpExtenderCallbacks.TOOL_SEQUENCER]\r\n\tsession[\"current_address\"] = session[\"original_address\"]\r\n\tif not re.match(\"^\\d{1,3}(\\.\\d{1,3}){3,3}$\", session[\"original_address\"]):\r\n\t\traise ValueError(\"Given IP address is invalid.\")\r\n\r\ndef get_next_ip():\r\n\t\"\"\"\r\n\tThis function returns the next IPv4 address.\r\n\t\"\"\"\r\n\tglobal session\r\n\tresult = session[\"current_address\"]\r\n\tbyte1, byte2, byte3, byte4 = [int(item) for item in session[\"current_address\"].split(\".\")]\r\n\tbyte4 += 1\r\n\tif byte4 > 255:\r\n\t\tbyte4 = 1\r\n\t\tbyte3 += 1\r\n\tif byte3 > 255:\r\n\t\tbyte3 = 1\r\n\t\tbyte2 += 1\r\n\tif byte2 > 255:\r\n\t\tbyte2 = 1\r\n\t\tbyte1 += 1\r\n\tif byte1 > 255:\r\n\t\tbyte1 = int(session[\"original_address\"].split(\".\")[0])\r\n\tsession[\"current_address\"] = \"{}.{}.{}.{}\".format(byte1, byte2, byte3, byte4)\r\n\treturn result\r\n\r\n# Process only in-scope HTTP requests\r\nif in_scope and is_request and tool_flag in session[\"tools\"]:\r\n\theader = session[\"header\"]\r\n\trequest = message_info.getRequest()\r\n\trequest_info = helpers.analyzeRequest(request)\r\n\theaders = [item for item in request_info.getHeaders() if header != item]\r\n\tbody_offset = request_info.getBodyOffset()\r\n\tbody_bytes = request[body_offset:]\r\n\tbody_content = helpers.bytesToString(body_bytes)\r\n\r\n\t# Add X-Forward-For header\r\n\tip_address = get_next_ip()\r\n\theaders.append(\"{}: https://{}\".format(header, ip_address))\r\n\r\n\t# Build and update new request\r\n\trequest = helpers.buildHttpMessage(headers, body_content)\r\n\tmessage_info.setRequest(request)", 
    "name": "Template Script to Add the Header X-Forwarded-For with Different IPv4 Addresses to Each HTTP Request"
}